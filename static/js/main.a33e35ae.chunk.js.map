{"version":3,"sources":["constants.ts","StockGraph.tsx","Filters.tsx","Spinner.tsx","Loading.tsx","ApiDataAdapter.ts","config.ts","YahooFinanceApi.ts","reducer.tsx","App.tsx","index.tsx"],"names":["ACTIONS","Chart","graphData","useState","showAverage","setShowAverage","width","aspect","debounce","data","type","name","dataKey","stroke","domain","verticalAlign","height","CheckBox","id","label","checked","onChange","e","target","StockGraph","symbol","className","Heading","level","length","Paragraph","margin","Filters","filters","applyFilters","setSymbol","range","setRange","rangeOptions","value","selectedRange","find","size","htmlFor","TextInput","placeholder","toUpperCase","Select","bottom","options","labelKey","valueKey","Button","primary","onClick","spinning","version","viewBox","fill","opacity","d","attributeName","from","to","dur","repeatCount","Spinner","Box","align","justify","Loading","ApiDataAdapter","result","chart","timestamps","quote","this","timestamp","indicators","reduce","stamp","index","close","open","averageStore","average","point","moment","format","av","points","API_HEADERS","process","YahooFinanceApi","customFetcher","fetcher","apis","market","getCharts","window","fetch","bind","getRawChartData","apiAdapter","getGraphData","method","headers","response","json","error","Error","description","console","log","reducer","state","action","SET_FILTERS","SET_POINTS","loading","LOAD_POINTS","SET_ERROR","RESET_APP","initialState","App","useReducer","dispatch","useEffect","loadData","a","getChartData","message","ReactDOM","render","StrictMode","Grommet","theme","global","colors","brand","font","document","getElementById"],"mappings":"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","file":"static/js/main.a33e35ae.chunk.js","sourcesContent":["export const SET_FILTERS = 'SET_FILTERS'\nexport const SET_POINTS = 'SET_POINTS'\nexport const LOAD_POINTS = 'LOAD_POINTS'\nexport const SET_ERROR = 'SET_ERROR'\nexport const RESET_APP = 'RESET_APP'\n\nexport enum ACTIONS {\n    SET_FILTERS,\n    SET_POINTS,\n    LOAD_POINTS,\n    SET_ERROR,\n    RESET_APP\n}","import React, { Fragment, useState } from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, ResponsiveContainer, Tooltip, Legend } from 'recharts';\nimport { CheckBox, Heading, Paragraph } from 'grommet'\nimport { IStockGraphProps, IPoint } from './types'\n\nconst Chart: React.FC<{ graphData: IPoint[] }> = ({ graphData }: { graphData: IPoint[] }) => {\n    const [showAverage, setShowAverage] = useState(false)\n\n    return <Fragment>\n        <ResponsiveContainer width={'100%'} aspect={3} debounce={1}>\n            <LineChart data={graphData}>\n                <Line type=\"monotone\" name=\"open\" dataKey=\"open\" stroke=\"blue\" />\n                <Line type=\"monotone\" name=\"close\" dataKey=\"close\" stroke=\"red\" />\n                {showAverage ? <Line type=\"monotone\" name=\"average\" dataKey=\"av.average\" stroke=\"green\" /> : null}\n                <CartesianGrid stroke=\"#ccc\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis type=\"number\" domain={['dataMin-10', 'dataMax+10']} />\n                <Tooltip />\n                <Legend verticalAlign=\"top\" height={36} />\n            </LineChart>\n        </ResponsiveContainer>\n        <CheckBox id=\"show-average\" label={\"Show Average\"} checked={showAverage} onChange={(e) => setShowAverage(e.target.checked)} />\n    </Fragment>\n}\nconst StockGraph: React.FC<IStockGraphProps> = ({ graphData, symbol }: IStockGraphProps) =>\n    <div className=\"Graph-section\">\n        {symbol ? <Heading level={3}>Symbol: {symbol}</Heading> : null}\n        {graphData.length ?\n            <Chart graphData={graphData} />\n            : <Paragraph margin={\"medium\"}>No data to draw the chart. Please asjust the filters on the left side of the screen</Paragraph>}\n    </div>\n\nexport default StockGraph","import React, { useState } from 'react'\nimport { TextInput, Button, Select, Heading } from 'grommet'\nimport { IFiltersProps } from './types'\n\nconst Filters: React.FC<IFiltersProps> = ({ filters, applyFilters }: IFiltersProps) => {\n    const [symbol, setSymbol] = useState(filters.symbol)\n    const [range, setRange] = useState(filters.range)\n\n    const symbolChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => setSymbol(e.target.value.toUpperCase())\n    const rangeChangeHandler = (e: any) => setRange(e.value.value)\n\n    const rangeOptions = [\n        { value: '1d', name: '1 day' },\n        { value: '5d', name: '5 days' },\n        { value: '3mo', name: '3 months' },\n        { value: '6mo', name: '6 months' },\n        { value: '1y', name: '1 year' },\n        { value: '5y', name: '5 years' },\n        { value: 'max', name: 'Maximum possible' },\n    ]\n\n    const selectedRange = rangeOptions.find(({ value }) => value === range)\n\n    return <div className=\"Filters\">\n        <Heading size=\"small\" level={2}>Filters</Heading>\n        <div className=\"Filter\">\n            <label htmlFor={\"symbol\"}>Symbol</label>\n            <TextInput className=\"Filters-symbol\" placeholder=\"Enter Symbol\" id=\"symbol\" name=\"symbol\" value={symbol} onChange={symbolChangeHandler} />\n        </div>\n        <div className=\"Filter\">\n            <label htmlFor={\"range-selector\"}>Range</label>\n            <Select placeholder=\"Range\" id=\"range-selector\" margin={{ bottom: \"medium\" }} onChange={rangeChangeHandler} options={rangeOptions} labelKey={\"name\"} valueKey={\"value\"} value={selectedRange} />\n        </div>\n        <Button primary onClick={() => applyFilters({ symbol, range })} label=\"Apply Filters\" />\n    </div>\n}\n\nexport default Filters","import React from \"react\";\nimport { Box } from \"grommet\";\n\nconst spinning = (\n    <svg\n        version=\"1.1\"\n        viewBox=\"0 0 32 32\"\n        width=\"28px\"\n        height=\"28px\"\n        fill=\"#7D4CDB\"\n    >\n        <path\n            opacity=\".25\"\n            d=\"M16 0 A16 16 0 0 0 16 32 A16 16 0 0 0 16 0 M16 4 A12 12 0 0 1 16 28 A12 12 0 0 1 16 4\"\n        />\n        <path d=\"M16 0 A16 16 0 0 1 32 16 L28 16 A12 12 0 0 0 16 4z\">\n            <animateTransform\n                attributeName=\"transform\"\n                type=\"rotate\"\n                from=\"0 16 16\"\n                to=\"360 16 16\"\n                dur=\"0.8s\"\n                repeatCount=\"indefinite\"\n            />\n        </path>\n    </svg>\n);\n\nexport const Spinner = () => (\n    <Box align=\"center\" justify=\"center\">\n        {spinning}\n    </Box>\n);\n\nexport default Spinner;\n","import React, { Fragment } from 'react';\nimport { Paragraph } from 'grommet'\nimport Spinner from './Spinner'\n\nconst Loading: React.FC<{ symbol: string }> = ({ symbol }: { symbol: string }) => (\n    <Fragment>\n        <Paragraph margin={\"medium\"}>Loading data for {symbol}</Paragraph>\n        <Spinner />\n    </Fragment>\n)\n\nexport default Loading","import moment from 'moment';\nimport { IAPIData, IGraphData, IQuote, IPoint } from './types';\n\nclass ApiDataAdapter {\n    private timestamps: number[]\n    private quote: IQuote\n\n    constructor({chart: {result}}: IAPIData) {\n        this.timestamps = result[0].timestamp\n        this.quote = result[0].indicators.quote[0]\n    }\n\n    getGraphData(): IPoint[] {\n        const graphData: IGraphData = this.timestamps.reduce((result: IGraphData, stamp: number, index: number) => {\n            const close = this.quote.close[index]\n            const open = this.quote.open[index]\n            result.averageStore.average = (close + result.averageStore.average * (index))/(index+1)\n            const point = {\n              close,\n              open,\n              name: moment(stamp * 1000).format('MMMM Do YYYY'),\n              av: result.averageStore\n            }\n            result.points = [...result.points, point]\n            return result\n          }, {points: [], averageStore: {average: 0}})\n        \n        return graphData.points\n    }\n}\n\nexport default ApiDataAdapter","export const API_BASE_URL = process.env.REACT_APP_API_BASE_URL\nexport const API_HEADERS = {\n  \"x-rapidapi-host\": process.env.REACT_APP_X_RAPIDAPI_HOST,\n  \"x-rapidapi-key\": process.env.REACT_APP_X_RAPIDAPI_KEY,\n  \"useQueryString\": true\n};\n","import ApiDataAdapter from \"./ApiDataAdapter\";\nimport { API_BASE_URL, API_HEADERS } from \"./config\";\nimport { IPoint, IFilters, IAPIData } from \"./types\";\n\nclass YahooFinanceApi {\n  private fetcher: any;\n  private apis = {\n    market: {\n      getCharts: \"/market/get-charts\",\n    },\n  };\n  constructor(customFetcher?: any) {\n    this.fetcher = customFetcher || window.fetch.bind(window);\n  }\n\n  async getChartData(filters: IFilters): Promise<IPoint[]> {\n    const data = await this.getRawChartData(filters);\n    const apiAdapter = new ApiDataAdapter(data);\n    return apiAdapter.getGraphData();\n  }\n\n  async getRawChartData(filters: IFilters): Promise<IAPIData> {\n    try {\n      const response = await this.fetcher(\n        `${API_BASE_URL}${this.apis.market.getCharts}?region=US&lang=en&symbol=${filters.symbol}&range=${filters.range}&interval=1d`,\n        { method: \"GET\", headers: API_HEADERS }\n      );\n      const data = await response.json();\n      if (data.chart.error) {\n        throw new Error(data.chart.error.description);\n      }\n\n      return data;\n    } catch (e) {\n      console.log(e);\n      throw new Error(\n        \"A problem occured while loading the needed informations\"\n      );\n    }\n  }\n}\n\nexport default YahooFinanceApi;\n","import { ACTIONS } from './constants';\nimport { IAppState, IAction } from './types';\n\nexport const reducer = (state: IAppState, action: IAction) => {\n    switch (action.type) {\n        case ACTIONS.SET_FILTERS:\n            return { ...state, filters: { ...state.filters, ...action.filters } };\n        case ACTIONS.SET_POINTS:\n            return { ...state, points: [...action.points], loading: false };\n        case ACTIONS.LOAD_POINTS:\n            return { ...state, points: [], loading: true }\n        case ACTIONS.SET_ERROR:\n            return { ...state, points: [], loading: false, error: action.error }\n        case ACTIONS.RESET_APP:\n            return { ...action.initialState }\n    }\n};\n","import React, { useEffect, useReducer } from 'react'\nimport './App.css'\nimport { ACTIONS } from './constants'\nimport StockGraph from './StockGraph'\nimport Filters from './Filters'\nimport Loading from './Loading'\nimport { IAppProps, IAppState, IFilters } from './types'\nimport YahooFinanceApi from './YahooFinanceApi'\nimport { reducer } from './reducer'\n// use the MockFetch if you don't want to load live data from RapidApi\n// import MockFetch from './MockFetch' \n\n\nconst initialState: IAppState = {\n  points: [],\n  filters: {\n    symbol: '',\n    range: '5d',\n  },\n  loading: false,\n  error: '',\n}\n\nconst App: React.FC<IAppProps> = () => {\n  const [{ points, filters, loading, error }, dispatch] = useReducer(reducer, initialState)\n  const { symbol } = filters\n  const applyFilters = (filters: IFilters) => dispatch({ type: ACTIONS.SET_FILTERS, filters })\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        dispatch({ type: ACTIONS.LOAD_POINTS })\n        const points = await new YahooFinanceApi().getChartData(filters)\n        dispatch({ type: ACTIONS.SET_POINTS, points })\n      } catch (e) {\n        dispatch({ type: ACTIONS.SET_ERROR, error: e.message })\n      }\n    }\n\n    if (filters.symbol) {\n      loadData()\n    } else {\n      dispatch({ type: ACTIONS.RESET_APP, initialState })\n    }\n  }, [filters])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Stock Graph\n      </header>\n      <div className=\"App-content\">\n        <div className=\"App-filters\"><Filters filters={filters} applyFilters={applyFilters} /></div>\n        <div className=\"App-graph\">\n          {loading ?\n            <Loading symbol={symbol} />\n            : (error ?\n              (<div> {error} </div>)\n              : <StockGraph graphData={points} symbol={symbol} />)}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Grommet } from 'grommet';\nimport './index.css';\nimport App from './App';\n\nconst theme = {\n  global: {\n    colors: {\n      brand: '#228BE6',\n    },\n    font: {\n      size: '16px',\n      height: '20px',\n    },\n  },\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <Grommet theme={theme}>\n      <App />\n    </Grommet>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}